import { codeError } from '../../constants/code-error.constant'
import { constraint } from '../../constants/nesting-text.constant'
import { CommonExceptionEnum, ValidationExceptionEnum } from '../../enums'
import { ValidationExceptionType } from '../../types'

export const validationExceptionRu: ValidationExceptionType = {
  [ValidationExceptionEnum.equals]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.equals,
    message: `Ошибка валидации!`,
    description: `Должно быть равно ${constraint}!`,
  },
  [ValidationExceptionEnum.isEmpty]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEmpty,
    message: `Ошибка валидации!`,
    description: `Должно быть пусто!`,
  },
  [ValidationExceptionEnum.isIn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIn,
    message: `Ошибка валидации!`,
    description: `Должно быть одним из следующих значений: ${constraint}!`,
  },
  [ValidationExceptionEnum.isLatitude]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLatitude,
    message: `Ошибка валидации!`,
    description: `Должна быть строкой или числом широты!`,
  },
  [ValidationExceptionEnum.isLatLong]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLatLong,
    message: `Ошибка валидации!`,
    description: `Должна быть строка широты и долготы!`,
  },
  [ValidationExceptionEnum.isNotEmpty]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNotEmpty,
    message: `Ошибка валидации!`,
    description: `Не должно быть пустым!`,
  },
  [ValidationExceptionEnum.isLongitude]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLongitude,
    message: `Ошибка валидации!`,
    description: `Должна быть строкой долготы или числом!`,
  },
  [ValidationExceptionEnum.isOptional]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isOptional,
    message: `Ошибка валидации!`,
    description: `isOptional!`,
  },
  [ValidationExceptionEnum.isNotIn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNotIn,
    message: `Ошибка валидации!`,
    description: `Не должно быть одним из следующих значений: ${constraint}!`,
  },
  [ValidationExceptionEnum.notEquals]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.notEquals,
    message: `Ошибка валидации!`,
    description: `Не должно быть равно ${constraint}!`,
  },
  [ValidationExceptionEnum.arrayContains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayContains,
    message: `Ошибка валидации!`,
    description: `Должен содержать значения ${constraint}!`,
  },
  [ValidationExceptionEnum.arrayMaxSize]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayMaxSize,
    message: `Ошибка валидации!`,
    description: `Должно содержать не более элементов ${constraint}!`,
  },
  [ValidationExceptionEnum.arrayMinSize]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayMinSize,
    message: `Ошибка валидации!`,
    description: `Должен содержать как минимум элементы ${constraint}!`,
  },
  [ValidationExceptionEnum.arrayNotContains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayNotContains,
    message: `Ошибка валидации!`,
    description: `Не должно содержать значений ${constraint}!`,
  },
  [ValidationExceptionEnum.arrayNotEmpty]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayNotEmpty,
    message: `Ошибка валидации!`,
    description: `Не должно быть пустым!`,
  },
  [ValidationExceptionEnum.arrayUnique]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayUnique,
    message: `Ошибка валидации!`,
    description: `Все элементы должны быть уникальными!`,
  },
  [ValidationExceptionEnum.isInstance]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isInstance,
    message: `Ошибка валидации!`,
    description: `Должен быть экземпляром ${constraint}} ИЛИ декоратор isInstance ожидал и объект как значение, но получил ложное значение!`,
  },
  [ValidationExceptionEnum.isNotEmptyObject]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNotEmptyObject,
    message: `Ошибка валидации!`,
    description: `Должен быть непустым объектом!`,
  },
  [ValidationExceptionEnum.isNegative]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNegative,
    message: `Ошибка валидации!`,
    description: `Должно быть отрицательное число!`,
  },
  [ValidationExceptionEnum.isDivisibleBy]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDivisibleBy,
    message: `Ошибка валидации!`,
    description: `Должно делиться на ${constraint}!`,
  },
  [ValidationExceptionEnum.isPositive]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPositive,
    message: `Ошибка валидации!`,
    description: `Должно быть положительным числом!`,
  },
  [ValidationExceptionEnum.max]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.max,
    message: `Ошибка валидации!`,
    description: `Не должно быть больше ${constraint}!`,
  },
  [ValidationExceptionEnum.min]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.min,
    message: `Ошибка валидации!`,
    description: `Должно быть не меньше ${constraint}!`,
  },
  [ValidationExceptionEnum.isBoolean]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBoolean,
    message: `Ошибка валидации!`,
    description: `Должна быть логическая строка!`,
  },
  [ValidationExceptionEnum.isArray]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isArray,
    message: `Ошибка валидации!`,
    description: `Должен быть массив!`,
  },
  [ValidationExceptionEnum.isDate]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDate,
    message: `Ошибка валидации!`,
    description: `Должен быть экземпляр Date!`,
  },
  [ValidationExceptionEnum.isEnum]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEnum,
    message: `Ошибка валидации!`,
    description: `Должно быть одним из следующих значений: ${constraint}!`,
  },
  [ValidationExceptionEnum.isInt]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isInt,
    message: `Ошибка валидации!`,
    description: `Должно быть целое число!`,
  },
  [ValidationExceptionEnum.isNumber]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNumber,
    message: `Ошибка валидации!`,
    description: `Должно быть числом, соответствующим указанным ограничениям!`,
  },
  [ValidationExceptionEnum.isObject]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isObject,
    message: `Ошибка валидации!`,
    description: `Должен быть объект!`,
  },
  [ValidationExceptionEnum.isString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isString,
    message: `Ошибка валидации!`,
    description: `Должна быть строка!`,
  },
  [ValidationExceptionEnum.maxDate]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.maxDate,
    message: `Ошибка валидации!`,
    description: `Максимально допустимая дата: ${constraint}!`,
  },
  [ValidationExceptionEnum.minDate]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.minDate,
    message: `Ошибка валидации!`,
    description: `Минимально допустимая дата: ${constraint}!`,
  },
  [ValidationExceptionEnum.contains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.contains,
    message: `Ошибка валидации!`,
    description: `Должен содержать строку ${constraint}!`,
  },
  [ValidationExceptionEnum.isAlpha]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isAlpha,
    message: `Ошибка валидации!`,
    description: `Должен содержать только буквы из набора ${constraint}!`,
  },
  [ValidationExceptionEnum.isAlphanumeric]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isAlphanumeric,
    message: `Ошибка валидации!`,
    description: `Должно содержать только буквы и цифры!`,
  },
  [ValidationExceptionEnum.isAscii]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isAscii,
    message: `Ошибка валидации!`,
    description: `Должен содержать только символы ASCII!`,
  },
  [ValidationExceptionEnum.isBIC]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBIC,
    message: `Ошибка валидации!`,
    description: `Должен быть код BIC или SWIFT!`,
  },
  [ValidationExceptionEnum.isBase32]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBase32,
    message: `Ошибка валидации!`,
    description: `Должно быть в кодировке Base32!`,
  },
  [ValidationExceptionEnum.isBase58]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBase58,
    message: `Ошибка валидации!`,
    description: `Должно быть в кодировке Base58!`,
  },
  [ValidationExceptionEnum.isBase64]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBase64,
    message: `Ошибка валидации!`,
    description: `Должно быть в кодировке Base64!`,
  },
  [ValidationExceptionEnum.isBtcAddress]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBtcAddress,
    message: `Ошибка валидации!`,
    description: `Должен быть адрес BTC!`,
  },
  [ValidationExceptionEnum.isBooleanString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBooleanString,
    message: `Ошибка валидации!`,
    description: `Должна быть логическая строка!`,
  },
  [ValidationExceptionEnum.isByteLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isByteLength,
    message: `Ошибка валидации!`,
    description: `Длина байта должна попадать в диапазон (${constraint}})!`,
  },
  [ValidationExceptionEnum.isCurrency]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isCurrency,
    message: `Ошибка валидации!`,
    description: `Должна быть валюта!`,
  },
  [ValidationExceptionEnum.isCreditCard]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isCreditCard,
    message: `Ошибка валидации!`,
    description: `Должна быть кредитная карта!`,
  },
  [ValidationExceptionEnum.isDataURI]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDataURI,
    message: `Ошибка валидации!`,
    description: `Должен быть формат URI данных!`,
  },
  [ValidationExceptionEnum.isDateString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDateString,
    message: `Ошибка валидации!`,
    description: `Должна быть допустимой строкой даты ISO 8601!`,
  },
  [ValidationExceptionEnum.isDecimal]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDecimal,
    message: `Ошибка валидации!`,
    description: `Недопустимое десятичное число!`,
  },
  [ValidationExceptionEnum.isEAN]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEAN,
    message: `Ошибка валидации!`,
    description: `Должен быть EAN (европейский артикул)!`,
  },
  [ValidationExceptionEnum.isEmail]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEmail,
    message: `Ошибка валидации!`,
    description: `Должно быть электронная почта!`,
  },
  [ValidationExceptionEnum.isFqdn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isFqdn,
    message: `Ошибка валидации!`,
    description: `Должно быть действительным доменным именем!`,
  },
  [ValidationExceptionEnum.IsFirebasePushId]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.IsFirebasePushId,
    message: `Ошибка валидации!`,
    description: `Должен быть идентификатор push-уведомления Firebase!`,
  },
  [ValidationExceptionEnum.isEthereumAddress]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEthereumAddress,
    message: `Ошибка валидации!`,
    description: `Должен быть адрес Ethereum!`,
  },
  [ValidationExceptionEnum.isFullWidth]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isFullWidth,
    message: `Ошибка валидации!`,
    description: `Должен содержать символы полной ширины!`,
  },
  [ValidationExceptionEnum.isHSL]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHSL,
    message: `Ошибка валидации!`,
    description: `Должен быть цвет HSL!`,
  },
  [ValidationExceptionEnum.isHash]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHash,
    message: `Ошибка валидации!`,
    description: `Должен быть хэш типа ${constraint}!`,
  },
  [ValidationExceptionEnum.isHalfWidth]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHalfWidth,
    message: `Ошибка валидации!`,
    description: `Должен содержать символы половинной ширины!`,
  },
  [ValidationExceptionEnum.isHexColor]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHexColor,
    message: `Ошибка валидации!`,
    description: `Должен быть шестнадцатеричный цвет!`,
  },
  [ValidationExceptionEnum.isHexadecimal]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHexadecimal,
    message: `Ошибка валидации!`,
    description: `Должно быть шестнадцатеричное число!`,
  },
  [ValidationExceptionEnum.isIBAN]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIBAN,
    message: `Ошибка валидации!`,
    description: `Должен быть IBAN!`,
  },
  [ValidationExceptionEnum.isIsbn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIsbn,
    message: `Ошибка валидации!`,
    description: `Должен быть ISBN!`,
  },
  [ValidationExceptionEnum.isIp]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIp,
    message: `Ошибка валидации!`,
    description: `Должен быть IP-адрес!`,
  },
  [ValidationExceptionEnum.isIsin]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIsin,
    message: `Ошибка валидации!`,
    description: `Должен быть ISIN (идентификатор акции/ценной бумаги)!`,
  },
  [ValidationExceptionEnum.isISO31661Alpha2]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISO31661Alpha2,
    message: `Ошибка валидации!`,
    description: `Должен быть действительный код ISO31661 Alpha2!`,
  },
  [ValidationExceptionEnum.isISO31661Alpha3]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISO31661Alpha3,
    message: `Ошибка валидации!`,
    description: `Должен быть действительный код ISO31661 Alpha3!`,
  },
  [ValidationExceptionEnum.isIso8601]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIso8601,
    message: `Ошибка валидации!`,
    description: `Должна быть допустимой строкой даты ISO 8601!`,
  },
  [ValidationExceptionEnum.isISRC]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISRC,
    message: `Ошибка валидации!`,
    description: `Должен быть ISRC!`,
  },
  [ValidationExceptionEnum.isISSN]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISSN,
    message: `Ошибка валидации!`,
    description: `Должен быть ISSN!`,
  },
  [ValidationExceptionEnum.isIdentityCard]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIdentityCard,
    message: `Ошибка валидации!`,
    description: `Должен быть номер удостоверения личности!`,
  },
  [ValidationExceptionEnum.isJson]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isJson,
    message: `Ошибка валидации!`,
    description: `Должна быть строка json!`,
  },
  [ValidationExceptionEnum.isJwt]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isJwt,
    message: `Ошибка валидации!`,
    description: `Должна быть строка jwt!`,
  },
  [ValidationExceptionEnum.isLocale]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLocale,
    message: `Ошибка валидации!`,
    description: `Должно быть локаль!`,
  },
  [ValidationExceptionEnum.isLowercase]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLowercase,
    message: `Ошибка валидации!`,
    description: `Должна быть строка в нижнем регистре!`,
  },
  [ValidationExceptionEnum.isMacAddress]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMacAddress,
    message: `Ошибка валидации!`,
    description: `Должен быть MAC-адрес!`,
  },
  [ValidationExceptionEnum.isMilitaryTime]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMilitaryTime,
    message: `Ошибка валидации!`,
    description: `Должно быть действительным представлением военного времени в формате ЧЧ:ММ!`,
  },
  [ValidationExceptionEnum.isMagnetURI]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMagnetURI,
    message: `Ошибка валидации!`,
    description: `Должен быть формат Magnetic URI!`,
  },
  [ValidationExceptionEnum.isMimeType]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMimeType,
    message: `Ошибка валидации!`,
    description: `Должен быть формат типа MIME!`,
  },
  [ValidationExceptionEnum.isMobilePhone]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMobilePhone,
    message: `Ошибка валидации!`,
    description: `Должен быть номер телефона!`,
  },
  [ValidationExceptionEnum.isMultibyte]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMultibyte,
    message: `Ошибка валидации!`,
    description: `Должен содержать один или несколько многобайтовых символов!`,
  },
  [ValidationExceptionEnum.isMongoId]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMongoId,
    message: `Ошибка валидации!`,
    description: `Должен быть идентификатор mongodb!`,
  },
  [ValidationExceptionEnum.isNumberString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNumberString,
    message: `Ошибка валидации!`,
    description: `Должна быть числовая строка!`,
  },
  [ValidationExceptionEnum.isOctal]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isOctal,
    message: `Ошибка валидации!`,
    description: `Должно быть действительным восьмеричным числом!`,
  },
  [ValidationExceptionEnum.isPassportNumber]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPassportNumber,
    message: `Ошибка валидации!`,
    description: `Должен быть действительный номер паспорта!`,
  },
  [ValidationExceptionEnum.isPhoneNumber]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPhoneNumber,
    message: `Ошибка валидации!`,
    description: `Должен быть действительный номер телефона!`,
  },
  [ValidationExceptionEnum.isPort]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPort,
    message: `Ошибка валидации!`,
    description: `Должно быть порт!`,
  },
  [ValidationExceptionEnum.isPostalCode]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPostalCode,
    message: `Ошибка валидации!`,
    description: `Должен быть почтовый индекс!`,
  },
  [ValidationExceptionEnum.isRFC3339]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isRFC3339,
    message: `Ошибка валидации!`,
    description: `Должна быть дата RFC 3339!`,
  },
  [ValidationExceptionEnum.isRgbColor]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isRgbColor,
    message: `Ошибка валидации!`,
    description: `Должен быть цвет RGB!`,
  },
  [ValidationExceptionEnum.isSemVer]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isSemVer,
    message: `Ошибка валидации!`,
    description: `Должна быть спецификация семантического управления версиями!`,
  },
  [ValidationExceptionEnum.isStrongPassword]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isStrongPassword,
    message: `Ошибка валидации!`,
    description:
      `Недостаточно силен! Минимальная длина minLength, ` +
      `минимальное количество букв в верхнем регистре minUppercase, ` +
      `минимальное количество букв в нижнем регистре minLowercase, ` +
      `минимальное количество цифр minNumbers, ` +
      `минимальное количество символов minSymbols!`,
  },
  [ValidationExceptionEnum.isSurrogatePair]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isSurrogatePair,
    message: `Ошибка валидации!`,
    description: `Должен содержать любые суррогатные пары символов!`,
  },
  [ValidationExceptionEnum.isTimeZone]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isTimeZone,
    message: `Ошибка валидации!`,
    description: `Должен быть действительный часовой пояс IANA!`,
  },
  [ValidationExceptionEnum.isUuid]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isUuid,
    message: `Ошибка валидации!`,
    description: `Должен быть UUID!`,
  },
  [ValidationExceptionEnum.isUppercase]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isUppercase,
    message: `Ошибка валидации!`,
    description: `Должно быть в верхнем регистре!`,
  },
  [ValidationExceptionEnum.isUrl]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isUrl,
    message: `Ошибка валидации!`,
    description: `Должен быть URL-адрес!`,
  },
  [ValidationExceptionEnum.isVariableWidth]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isVariableWidth,
    message: `Ошибка валидации!`,
    description: `Должен содержать символы полной и половинной ширины!`,
  },
  [ValidationExceptionEnum.matches]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.matches,
    message: `Ошибка валидации!`,
    description: `Должно соответствовать регулярному выражению ${constraint}!`,
  },
  [ValidationExceptionEnum.isLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLength,
    message: `Ошибка валидации!`,
    description: `Должен быть включен в интервал ${constraint}} по длине символов!`,
  },
  [ValidationExceptionEnum.maxLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.maxLength,
    message: `Ошибка валидации!`,
    description: `Должен быть короче или равен символам ${constraint}!`,
  },
  [ValidationExceptionEnum.notContains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.notContains,
    message: `Ошибка валидации!`,
    description: `Не должно содержать строку ${constraint}!`,
  },
  [ValidationExceptionEnum.minLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.minLength,
    message: `Ошибка валидации!`,
    description: `Должен быть длиннее или равен символам ${constraint}!`,
  },
  [ValidationExceptionEnum.isISO4217CurrencyCode]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISO4217CurrencyCode,
    message: `Ошибка валидации!`,
    description: `Должен быть действительный код валюты ISO4217!`,
  },
  [ValidationExceptionEnum.isTaxId]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isTaxId,
    message: `Ошибка валидации!`,
    description: `Должен быть идентификационный номер налогоплательщика!`,
  },
  [ValidationExceptionEnum.isDefined]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDefined,
    message: `Ошибка валидации!`,
    description: `Не должно быть нулевым или неопределенным!`,
  },
  [ValidationExceptionEnum.IsArgumentBooleanDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.IsArgumentBooleanDecorator,
    message: `Ошибка валидации!`,
    description: `Поле должно содержать только логическое значение!`,
  },
  [ValidationExceptionEnum.IsAlphaWithMultipleLocalesDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.IsAlphaWithMultipleLocalesDecorator,
    message: `Ошибка валидации!`,
    description: `Поле должно содержать буквы из: ${constraint}!`,
  },
  [ValidationExceptionEnum.SortCustomDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.SortCustomDecorator,
    message: `Ошибка валидации!`,
    description: `Поле должно соблюдать правила сортировки!`,
  },
  [ValidationExceptionEnum.AtLeastOneFieldDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.AtLeastOneFieldDecorator,
    message: `Ошибка валидации!`,
    description: `Должно быть хотя бы одно значение!`,
  },
}

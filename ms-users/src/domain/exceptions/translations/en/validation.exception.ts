import { codeError } from '../../constants/code-error.constant'
import { constraint } from '../../constants/nesting-text.constant'
import { CommonExceptionEnum, ValidationExceptionEnum } from '../../enums'
import { ValidationExceptionType } from '../../types'

export const validationExceptionEn: ValidationExceptionType = {
  [ValidationExceptionEnum.equals]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.equals,
    message: `Validation error!`,
    description: `Must be equal to ${constraint}!`,
  },
  [ValidationExceptionEnum.isEmpty]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEmpty,
    message: `Validation error!`,
    description: `Must be empty!`,
  },
  [ValidationExceptionEnum.isIn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIn,
    message: `Validation error!`,
    description: `Must be one of the following values: ${constraint}!`,
  },
  [ValidationExceptionEnum.isLatitude]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLatitude,
    message: `Validation error!`,
    description: `Must be a latitude string or number!`,
  },
  [ValidationExceptionEnum.isLatLong]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLatLong,
    message: `Validation error!`,
    description: `Must be a latitude,longitude string!`,
  },
  [ValidationExceptionEnum.isNotEmpty]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNotEmpty,
    message: `Validation error!`,
    description: `Should not be empty!`,
  },
  [ValidationExceptionEnum.isLongitude]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLongitude,
    message: `Validation error!`,
    description: `Must be a longitude string or number!`,
  },
  [ValidationExceptionEnum.isOptional]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isOptional,
    message: `Validation error!`,
    description: `isOptional!`,
  },
  [ValidationExceptionEnum.isNotIn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNotIn,
    message: `Validation error!`,
    description: `Should not be one of the following values: ${constraint}!`,
  },
  [ValidationExceptionEnum.notEquals]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.notEquals,
    message: `Validation error!`,
    description: `Should not be equal to ${constraint}!`,
  },
  [ValidationExceptionEnum.arrayContains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayContains,
    message: `Validation error!`,
    description: `Must contain ${constraint}} values!`,
  },
  [ValidationExceptionEnum.arrayMaxSize]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayMaxSize,
    message: `Validation error!`,
    description: `Must contain no more than ${constraint}} elements!`,
  },
  [ValidationExceptionEnum.arrayMinSize]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayMinSize,
    message: `Validation error!`,
    description: `Must contain at least ${constraint}} elements!`,
  },
  [ValidationExceptionEnum.arrayNotContains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayNotContains,
    message: `Validation error!`,
    description: `Should not contain ${constraint}} values!`,
  },
  [ValidationExceptionEnum.arrayNotEmpty]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayNotEmpty,
    message: `Validation error!`,
    description: `Should not be empty!`,
  },
  [ValidationExceptionEnum.arrayUnique]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.arrayUnique,
    message: `Validation error!`,
    description: `All elements must be unique!`,
  },
  [ValidationExceptionEnum.isInstance]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isInstance,
    message: `Validation error!`,
    description: `Must be an instance of ${constraint}} OR isInstance decorator expects and object as value, but got falsy value!`,
  },
  [ValidationExceptionEnum.isNotEmptyObject]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNotEmptyObject,
    message: `Validation error!`,
    description: `Must be a non-empty object!`,
  },
  [ValidationExceptionEnum.isNegative]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNegative,
    message: `Validation error!`,
    description: `Must be a negative number!`,
  },
  [ValidationExceptionEnum.isDivisibleBy]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDivisibleBy,
    message: `Validation error!`,
    description: `Must be divisible by ${constraint}!`,
  },
  [ValidationExceptionEnum.isPositive]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPositive,
    message: `Validation error!`,
    description: `Must be a positive number!`,
  },
  [ValidationExceptionEnum.max]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.max,
    message: `Validation error!`,
    description: `Must not be greater than ${constraint}!`,
  },
  [ValidationExceptionEnum.min]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.min,
    message: `Validation error!`,
    description: `Must not be less than ${constraint}!`,
  },
  [ValidationExceptionEnum.isBoolean]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBoolean,
    message: `Validation error!`,
    description: `Must be a boolean string!`,
  },
  [ValidationExceptionEnum.isArray]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isArray,
    message: `Validation error!`,
    description: `Must be an array!`,
  },
  [ValidationExceptionEnum.isDate]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDate,
    message: `Validation error!`,
    description: `Must be a Date instance!`,
  },
  [ValidationExceptionEnum.isEnum]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEnum,
    message: `Validation error!`,
    description: `Must be one of the following values: ${constraint}!`,
  },
  [ValidationExceptionEnum.isInt]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isInt,
    message: `Validation error!`,
    description: `Must be an integer number!`,
  },
  [ValidationExceptionEnum.isNumber]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNumber,
    message: `Validation error!`,
    description: `Must be a number conforming to the specified constraints!`,
  },
  [ValidationExceptionEnum.isObject]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isObject,
    message: `Validation error!`,
    description: `Must be an object!`,
  },
  [ValidationExceptionEnum.isString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isString,
    message: `Validation error!`,
    description: `Must be a string!`,
  },
  [ValidationExceptionEnum.maxDate]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.maxDate,
    message: `Validation error!`,
    description: `Maximal allowed date is ${constraint}!`,
  },
  [ValidationExceptionEnum.minDate]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.minDate,
    message: `Validation error!`,
    description: `Minimal allowed date is ${constraint}!`,
  },
  [ValidationExceptionEnum.contains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.contains,
    message: `Validation error!`,
    description: `Must contain a ${constraint}} string!`,
  },
  [ValidationExceptionEnum.isAlpha]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isAlpha,
    message: `Validation error!`,
    description: `Must contain only letters from the ${constraint}} set!`,
  },
  [ValidationExceptionEnum.isAlphanumeric]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isAlphanumeric,
    message: `Validation error!`,
    description: `Must contain only letters and numbers!`,
  },
  [ValidationExceptionEnum.isAscii]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isAscii,
    message: `Validation error!`,
    description: `Must contain only ASCII characters!`,
  },
  [ValidationExceptionEnum.isBIC]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBIC,
    message: `Validation error!`,
    description: `Must be a BIC or SWIFT code!`,
  },
  [ValidationExceptionEnum.isBase32]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBase32,
    message: `Validation error!`,
    description: `Must be base32 encoded!`,
  },
  [ValidationExceptionEnum.isBase58]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBase58,
    message: `Validation error!`,
    description: `Must be base58 encoded!`,
  },
  [ValidationExceptionEnum.isBase64]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBase64,
    message: `Validation error!`,
    description: `Must be base64 encoded!`,
  },
  [ValidationExceptionEnum.isBtcAddress]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBtcAddress,
    message: `Validation error!`,
    description: `Must be a BTC address!`,
  },
  [ValidationExceptionEnum.isBooleanString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isBooleanString,
    message: `Validation error!`,
    description: `Must be a boolean string!`,
  },
  [ValidationExceptionEnum.isByteLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isByteLength,
    message: `Validation error!`,
    description: `Byte length must fall into (${constraint}}) range!`,
  },
  [ValidationExceptionEnum.isCurrency]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isCurrency,
    message: `Validation error!`,
    description: `Must be a currency!`,
  },
  [ValidationExceptionEnum.isCreditCard]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isCreditCard,
    message: `Validation error!`,
    description: `Must be a credit card!`,
  },
  [ValidationExceptionEnum.isDataURI]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDataURI,
    message: `Validation error!`,
    description: `Must be a data uri format!`,
  },
  [ValidationExceptionEnum.isDateString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDateString,
    message: `Validation error!`,
    description: `Must be a valid ISO 8601 date string!`,
  },
  [ValidationExceptionEnum.isDecimal]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDecimal,
    message: `Validation error!`,
    description: `Is not a valid decimal number!`,
  },
  [ValidationExceptionEnum.isEAN]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEAN,
    message: `Validation error!`,
    description: `Must be an EAN (European Article Number)!`,
  },
  [ValidationExceptionEnum.isEmail]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEmail,
    message: `Validation error!`,
    description: `Must be an email!`,
  },
  [ValidationExceptionEnum.isFqdn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isFqdn,
    message: `Validation error!`,
    description: `Must be a valid domain name!`,
  },
  [ValidationExceptionEnum.IsFirebasePushId]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.IsFirebasePushId,
    message: `Validation error!`,
    description: `Must be a Firebase Push Id!`,
  },
  [ValidationExceptionEnum.isEthereumAddress]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isEthereumAddress,
    message: `Validation error!`,
    description: `Must be an Ethereum address!`,
  },
  [ValidationExceptionEnum.isFullWidth]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isFullWidth,
    message: `Validation error!`,
    description: `Must contain a full-width characters!`,
  },
  [ValidationExceptionEnum.isHSL]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHSL,
    message: `Validation error!`,
    description: `Must be a HSL color!`,
  },
  [ValidationExceptionEnum.isHash]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHash,
    message: `Validation error!`,
    description: `Must be a hash of type ${constraint}!`,
  },
  [ValidationExceptionEnum.isHalfWidth]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHalfWidth,
    message: `Validation error!`,
    description: `Must contain a half-width characters!`,
  },
  [ValidationExceptionEnum.isHexColor]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHexColor,
    message: `Validation error!`,
    description: `Must be a hexadecimal color!`,
  },
  [ValidationExceptionEnum.isHexadecimal]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isHexadecimal,
    message: `Validation error!`,
    description: `Must be a hexadecimal number!`,
  },
  [ValidationExceptionEnum.isIBAN]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIBAN,
    message: `Validation error!`,
    description: `Must be an IBAN!`,
  },
  [ValidationExceptionEnum.isIsbn]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIsbn,
    message: `Validation error!`,
    description: `Must be an ISBN!`,
  },
  [ValidationExceptionEnum.isIp]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIp,
    message: `Validation error!`,
    description: `Must be an ip address!`,
  },
  [ValidationExceptionEnum.isIsin]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIsin,
    message: `Validation error!`,
    description: `Must be an ISIN (stock/security identifier)!`,
  },
  [ValidationExceptionEnum.isISO31661Alpha2]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISO31661Alpha2,
    message: `Validation error!`,
    description: `Must be a valid ISO31661 Alpha2 code!`,
  },
  [ValidationExceptionEnum.isISO31661Alpha3]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISO31661Alpha3,
    message: `Validation error!`,
    description: `Must be a valid ISO31661 Alpha3 code!`,
  },
  [ValidationExceptionEnum.isIso8601]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIso8601,
    message: `Validation error!`,
    description: `Must be a valid ISO 8601 date string!`,
  },
  [ValidationExceptionEnum.isISRC]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISRC,
    message: `Validation error!`,
    description: `Must be an ISRC!`,
  },
  [ValidationExceptionEnum.isISSN]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISSN,
    message: `Validation error!`,
    description: `Must be a ISSN!`,
  },
  [ValidationExceptionEnum.isIdentityCard]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isIdentityCard,
    message: `Validation error!`,
    description: `Must be a identity card number!`,
  },
  [ValidationExceptionEnum.isJson]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isJson,
    message: `Validation error!`,
    description: `Must be a json string!`,
  },
  [ValidationExceptionEnum.isJwt]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isJwt,
    message: `Validation error!`,
    description: `Must be a jwt string!`,
  },
  [ValidationExceptionEnum.isLocale]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLocale,
    message: `Validation error!`,
    description: `Must be locale!`,
  },
  [ValidationExceptionEnum.isLowercase]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLowercase,
    message: `Validation error!`,
    description: `Must be a lowercase string!`,
  },
  [ValidationExceptionEnum.isMacAddress]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMacAddress,
    message: `Validation error!`,
    description: `Must be a MAC Address!`,
  },
  [ValidationExceptionEnum.isMilitaryTime]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMilitaryTime,
    message: `Validation error!`,
    description: `Must be a valid representation of military time in the format HH:MM!`,
  },
  [ValidationExceptionEnum.isMagnetURI]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMagnetURI,
    message: `Validation error!`,
    description: `Must be magnet uri format!`,
  },
  [ValidationExceptionEnum.isMimeType]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMimeType,
    message: `Validation error!`,
    description: `Must be MIME type format!`,
  },
  [ValidationExceptionEnum.isMobilePhone]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMobilePhone,
    message: `Validation error!`,
    description: `Must be a phone number!`,
  },
  [ValidationExceptionEnum.isMultibyte]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMultibyte,
    message: `Validation error!`,
    description: `Must contain one or more multibyte chars!`,
  },
  [ValidationExceptionEnum.isMongoId]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isMongoId,
    message: `Validation error!`,
    description: `Must be a mongodb id!`,
  },
  [ValidationExceptionEnum.isNumberString]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isNumberString,
    message: `Validation error!`,
    description: `Must be a number string!`,
  },
  [ValidationExceptionEnum.isOctal]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isOctal,
    message: `Validation error!`,
    description: `Must be valid octal number!`,
  },
  [ValidationExceptionEnum.isPassportNumber]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPassportNumber,
    message: `Validation error!`,
    description: `Must be valid passport number!`,
  },
  [ValidationExceptionEnum.isPhoneNumber]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPhoneNumber,
    message: `Validation error!`,
    description: `Must be a valid phone number!`,
  },
  [ValidationExceptionEnum.isPort]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPort,
    message: `Validation error!`,
    description: `Must be a port!`,
  },
  [ValidationExceptionEnum.isPostalCode]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isPostalCode,
    message: `Validation error!`,
    description: `Must be a postal code!`,
  },
  [ValidationExceptionEnum.isRFC3339]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isRFC3339,
    message: `Validation error!`,
    description: `Must be RFC 3339 date!`,
  },
  [ValidationExceptionEnum.isRgbColor]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isRgbColor,
    message: `Validation error!`,
    description: `Must be RGB color!`,
  },
  [ValidationExceptionEnum.isSemVer]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isSemVer,
    message: `Validation error!`,
    description: `Must be a Semantic Versioning Specification!`,
  },
  [ValidationExceptionEnum.isStrongPassword]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isStrongPassword,
    message: `Validation error!`,
    description:
      `Not strong enough! Minimum length minLength, ` +
      `minimum number of uppercase letters minUppercase, ` +
      `minimum number of lowercase letters minLowercase, ` +
      `minimum number of digits minNumbers, ` +
      `minimum number of symbols minSymbols!`,
  },
  [ValidationExceptionEnum.isSurrogatePair]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isSurrogatePair,
    message: `Validation error!`,
    description: `Must contain any surrogate pairs chars!`,
  },
  [ValidationExceptionEnum.isTimeZone]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isTimeZone,
    message: `Validation error!`,
    description: `Must be a valid IANA time-zone!`,
  },
  [ValidationExceptionEnum.isUuid]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isUuid,
    message: `Validation error!`,
    description: `Must be a UUID!`,
  },
  [ValidationExceptionEnum.isUppercase]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isUppercase,
    message: `Validation error!`,
    description: `Must be uppercase!`,
  },
  [ValidationExceptionEnum.isUrl]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isUrl,
    message: `Validation error!`,
    description: `Must be a URL address!`,
  },
  [ValidationExceptionEnum.isVariableWidth]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isVariableWidth,
    message: `Validation error!`,
    description: `Must contain a full-width and half-width characters!`,
  },
  [ValidationExceptionEnum.matches]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.matches,
    message: `Validation error!`,
    description: `Must match ${constraint} regular expression!`,
  },
  [ValidationExceptionEnum.isLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isLength,
    message: `Validation error!`,
    description: `Must be inclusively included in the interval ${constraint} in character length!`,
  },
  [ValidationExceptionEnum.maxLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.maxLength,
    message: `Validation error!`,
    description: `Must be shorter than or equal to ${constraint} characters!`,
  },
  [ValidationExceptionEnum.notContains]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.notContains,
    message: `Validation error!`,
    description: `Should not contain a ${constraint} string!`,
  },
  [ValidationExceptionEnum.minLength]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.minLength,
    message: `Validation error!`,
    description: `Must be longer than or equal to ${constraint} characters!`,
  },
  [ValidationExceptionEnum.isISO4217CurrencyCode]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isISO4217CurrencyCode,
    message: `Validation error!`,
    description: `Must be a valid ISO4217 currency code!`,
  },
  [ValidationExceptionEnum.isTaxId]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isTaxId,
    message: `Validation error!`,
    description: `Must be a Tax Identification Number!`,
  },
  [ValidationExceptionEnum.isDefined]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.isDefined,
    message: `Validation error!`,
    description: `Should not be null or undefined!`,
  },
  [ValidationExceptionEnum.IsArgumentBooleanDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.IsArgumentBooleanDecorator,
    message: `Validation error!`,
    description: `The field must contain only a boolean value!`,
  },
  [ValidationExceptionEnum.IsAlphaWithMultipleLocalesDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.IsAlphaWithMultipleLocalesDecorator,
    message: `Validation error!`,
    description: `The field must contain letters from: ${constraint}!`,
  },
  [ValidationExceptionEnum.SortCustomDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.SortCustomDecorator,
    message: `Validation error!`,
    description: `The field must follow the sorting rules!`,
  },
  [ValidationExceptionEnum.AtLeastOneFieldDecorator]: {
    code: codeError[CommonExceptionEnum.VALIDATION],
    errorName: ValidationExceptionEnum.AtLeastOneFieldDecorator,
    message: `Validation error!`,
    description: `There must be at least one value!`,
  },
}
